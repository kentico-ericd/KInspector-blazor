@using KInspector.Core.Modules
@using KInspector.Core.Repositories.Interfaces
@using KInspector.Core.Services.Interfaces
@inject IJSRuntime js
@inject IModuleService moduleService
@inject IReportRepository reportRepository

<ModuleFilters Tags="UsedTags" FiltersChanged="StateHasChanged" @ref="Filters" />

<div class="space-y-8">
    @foreach (var report in reports)
    {
        <ReportCard Report="@report" />
    }
</div>

@code {
    private ModuleFilters? Filters;
    private IEnumerable<IReport> reports = Enumerable.Empty<IReport>();

    private IEnumerable<string> UsedTags
    {
        get
        {
            var reports = reportRepository.GetReports();
            var tags = Enumerable.Empty<string>();
            foreach (var r in reports)
            {
                tags = tags.Union(r.Tags);
            }

            return tags;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var tag = Filters?.SelectedTag;
        var showUntested = Filters?.ShowUntested ?? false;
        var showIncompatible = Filters?.ShowIncompatible ?? false;
        var nameFilter = Filters?.NameFilter;

        reports = await moduleService.GetReports(showUntested, showIncompatible, tag, nameFilter);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        // Init Flowbite every time, not just first load as elements added to the layout dynamically don't function without Flowbite
        await js.InvokeVoidAsync("window.initializeFlowbite");
    }
}
